from numpy         import zeros
from isotopelabels import NA

class NAnDLookup(object):
  def __init__(self, tables=None):
    if(tables):
      # List of NABCTables generated by the nacmath.NABCTable() 
      self._tables = tables
      # Dimensionality of the lookup
      self._dims = len(tables)
  
  def _buildtables(self, order, maximums, type):
    self._tables = []
    self._dims   = len(order) 
    for isotope in order:
      maximum = maximums[isotope]
      tables  = NABCTables(maximum,NA[isotope])
      self._tables.append(tables[type])

class NAProduct(NAnDLookup):
  def __getitem__(self, index):
    p  = 1
    ns = index[0]
    ks = index[1]
    t  = self._tables
    for dim in xrange(self._dims):
      p *= t[dim][ns[dim],ks[dim]]
    return p
  
  def BuildTables(self, order, maximums):
    self._buildtables(order, maximums, 0)
      
class NASumProduct(NAnDLookup):
  def __getitem__(self, ns):
    p = 1
    t = self._tables
    for dim in xrange(self._dims):
      if(ns[dim] == len(t[dim])): continue
      p *= t[dim][ns[dim]]
    return p

  def BuildTables(self, order, maximums):
    self._buildtables(order, maximums, 1)
    
def NABCTables(imax, na):
  ptable = zeros(shape=(imax + 1, imax + 1), dtype=float)
  stable = [0]*(imax + 1)
  for n in xrange(imax + 1):
    ptable[n,n] = NABC(imax - n, 0, imax - n, na)
    nsum = 0
    for k in xrange(imax,n,-1):
      ptable[n,k] = NABC(imax - n, k - n, imax - k, na)
      nsum += ptable[n,k]
    stable[n] = 1 - nsum
  return [ptable, stable]  

def NABC(a, b, c, na):
  denomax  = min(a - b, b)
  numermin = max(a - b, b)
  divisor  = 1
  result   = 1
  while(a > numermin or divisor <= denomax or b > 0 or c > 0):
    if(a > numermin):
      result *= a
      a -= 1
    if(divisor <= denomax):
      result /= divisor
      divisor += 1
    if(b > 0):
      result *= na
      b -= 1
    if(c > 0):
      result *= (1 - na)
      c -= 1
  return result
